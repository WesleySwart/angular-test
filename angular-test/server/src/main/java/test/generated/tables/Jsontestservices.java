/**
 * This class is generated by jOOQ
 */
package test.generated.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import test.generated.Keys;
import test.generated.Test;
import test.generated.tables.records.JsontestservicesRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Jsontestservices extends TableImpl<JsontestservicesRecord> {

    private static final long serialVersionUID = -716320407;

    /**
     * The reference instance of <code>Test.JsonTestServices</code>
     */
    public static final Jsontestservices JSONTESTSERVICES = new Jsontestservices();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JsontestservicesRecord> getRecordType() {
        return JsontestservicesRecord.class;
    }

    /**
     * The column <code>Test.JsonTestServices.id</code>.
     */
    public final TableField<JsontestservicesRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Test.JsonTestServices.ServiceName</code>.
     */
    public final TableField<JsontestservicesRecord, String> SERVICENAME = createField("ServiceName", org.jooq.impl.SQLDataType.VARCHAR.length(45), this, "");

    /**
     * Create a <code>Test.JsonTestServices</code> table reference
     */
    public Jsontestservices() {
        this("JsonTestServices", null);
    }

    /**
     * Create an aliased <code>Test.JsonTestServices</code> table reference
     */
    public Jsontestservices(String alias) {
        this(alias, JSONTESTSERVICES);
    }

    private Jsontestservices(String alias, Table<JsontestservicesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Jsontestservices(String alias, Table<JsontestservicesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Test.TEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<JsontestservicesRecord, Integer> getIdentity() {
        return Keys.IDENTITY_JSONTESTSERVICES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<JsontestservicesRecord> getPrimaryKey() {
        return Keys.KEY_JSONTESTSERVICES_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<JsontestservicesRecord>> getKeys() {
        return Arrays.<UniqueKey<JsontestservicesRecord>>asList(Keys.KEY_JSONTESTSERVICES_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Jsontestservices as(String alias) {
        return new Jsontestservices(alias, this);
    }

    /**
     * Rename this table
     */
    public Jsontestservices rename(String name) {
        return new Jsontestservices(name, null);
    }
}
